import unittest
import random
import batchTaskAllocator as bta
import time

class TestAgent(unittest.TestCase):


    def calculateSUS(self, tasks, agent1Tasks, agent2Tasks):
        score = 0
        baseline = 0

        for task, skill1, skill2 in tasks:
            baseline += abs(skill1 - skill2)
            
            if (task, skill1, skill2) in agent1Tasks:
                score += (skill1 - skill2)
            elif (task, skill1, skill2) in agent2Tasks:
                score += (skill2 - skill1)

        # Normalize the score
        normalized_score = score / baseline if score > 0 else 0

        # Calculate task distribution factor
        # Calculate workload balance factor
        WorkloadBalanceFactor = 1 - (abs(len(agent1Tasks) - len(agent2Tasks)) / len(tasks))
        # WorkloadBalanceFactor = 2 * (1 - (abs(len(agent1Tasks) - len(agent2Tasks)) / len(tasks))) - 1 # Normalize to [-1 (worst balance), 1 (perfect balance)]


        # Combine normalized score and task distribution factor
        SUS = (normalized_score * WorkloadBalanceFactor) * 100 if baseline > 0 else 0
        return SUS

    def setUp(self, numTasks):
        self.fileName = "log.txt"
        self.numTasks = numTasks  # number of tasks to be assigned
        with open(self.fileName, "w") as f:
            f.write("")  # clear file
            f.close()

    def run_round(self, round_num, numRounds):
        allocationErrorFound = False

        with open(self.fileName, "a") as f:
            f.write(("~" * 25) + f"  ROUND {round_num} OF {numRounds}  " + ("~" * 25) + "\n")
            f.close()
        print("\n" + ("~" * 25) + f"  ROUND {round_num} OF {numRounds}  " + ("~" * 25) + "\n")

        # Generate random tasks and skills
        agent1 = bta.Agent("Agent 1")
        agent2 = bta.Agent("Agent 2")
        tasks = []  # formatted as [('Task X', skill1, skill2), ...]
        for i in range(self.numTasks):  # Generate random tasks
            task = f"Task {i+1}"
            # slicePoint = random.randint(1, 9)
            # skill1 = slicePoint
            # skill2 = 10 - slicePoint
            skill1 = random.randint(1, 10)
            skill2 = random.randint(1, 10)
            tasks.append((task, skill1, skill2))


        domain = bta.Domain(agent1, agent2, tasks)
        domain.assignTasks()
        agent1Tasks = domain.agent1.assignedTasks  # formatted as [('Task X', skill1, skill2), ...]
        agent2Tasks = domain.agent2.assignedTasks
        domain.printTasks()

        # bta.logMemoryBuffer(self.fileName, agent1, agent2)  # Log memory buffers
        f = open(self.fileName, "a")
        f.write("\nTasks for this round:\n")
        for task in tasks:
            f.write(f"- {task}\n")
        f.close()
        bta.logAssignedTasks(self.fileName, agent1, agent2)  # Log assigned tasks

        # Check if tasks are assigned correctly via SUS
        f = open(self.fileName, "a")
        SUS = self.calculateSUS(tasks, agent1Tasks, agent2Tasks)
        f.write(f"\nAllocation Scoring:\n    SUS (Skill Utilization Score) = {SUS}%\n")
        SUSThreshold = 50 # Trying to get above this threshold
        if SUS < SUSThreshold:
            allocationErrorFound = True
            f.write(f"\nBAD TASK ALLOCATION: SUS Score of {SUS}% is less than the minimum score of {SUSThreshold}%.\n")

        f.write(f"\nNumber of conversation iterations: {domain.numConversationIterations}")
        f.write(f"\nNumber of tokens generated by {agent1.name}: {agent1.numTokensGenerated}")
        f.write(f"\nNumber of tokens generated by {agent2.name}: {agent2.numTokensGenerated}\n")
        f.close()
        return allocationErrorFound, SUS
    
def format_seconds(seconds):
    # Ensure seconds is an integer
    total_seconds = int(seconds)
    
    # Calculate hours, minutes, and remaining seconds
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    remaining_seconds = total_seconds % 60
    
    # Format into "hh:mm:ss" with zero-padding
    formatted_time = f"{hours:02}:{minutes:02}:{remaining_seconds:02}"
    
    return formatted_time

def add_test_methods():
    numRounds = 1
    numAllocationErrors = 0
    totalSUSScore = 0
    ta = TestAgent()
    ta.setUp(numTasks = 6)
    totalTime = 0
    for i in range(numRounds):
        startTime = time.time()
        allocationErrorFound, SUS = ta.run_round(i+1, numRounds)
        totalSUSScore += SUS
        endTime = time.time()
        duration = endTime - startTime
        totalTime += duration
        numAllocationErrors += 1 if allocationErrorFound else 0
        with open (ta.fileName, "a") as f:
            f.write(f"Round {i+1} Duration: Completed in {format_seconds(duration)}\n\n")
            f.close()

    with open(ta.fileName, "a") as f:
        f.write(("=" * 25) + f"  TOTAL  " + ("=" * 25) + "\n")
        f.write(f"\nTotal Allocation errors: {numAllocationErrors} of {numRounds} rounds had an Assignment Error")
        f.write(f"\nAverage SUS: {totalSUSScore / numRounds}%")
        f.write(f"\nTotal Time: {format_seconds(totalTime)}")
        f.write(f"\nAverage Time per Round: {format_seconds(totalTime/numRounds)}\n")
        f.close()

def main():
    add_test_methods()

if __name__ == '__main__':
    main()